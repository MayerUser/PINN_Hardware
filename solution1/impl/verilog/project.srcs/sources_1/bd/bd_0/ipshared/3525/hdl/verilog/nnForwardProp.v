// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nnForwardProp,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.195200,HLS_SYN_LAT=185,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=39,HLS_SYN_FF=7481,HLS_SYN_LUT=10430,HLS_VERSION=2019_1}" *)

module nnForwardProp (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_pp0_stage0 = 31'd65536;
parameter    ap_ST_fsm_state76 = 31'd131072;
parameter    ap_ST_fsm_pp1_stage0 = 31'd262144;
parameter    ap_ST_fsm_state83 = 31'd524288;
parameter    ap_ST_fsm_state84 = 31'd1048576;
parameter    ap_ST_fsm_state85 = 31'd2097152;
parameter    ap_ST_fsm_state86 = 31'd4194304;
parameter    ap_ST_fsm_state87 = 31'd8388608;
parameter    ap_ST_fsm_state88 = 31'd16777216;
parameter    ap_ST_fsm_state89 = 31'd33554432;
parameter    ap_ST_fsm_state90 = 31'd67108864;
parameter    ap_ST_fsm_state91 = 31'd134217728;
parameter    ap_ST_fsm_state92 = 31'd268435456;
parameter    ap_ST_fsm_state93 = 31'd536870912;
parameter    ap_ST_fsm_state94 = 31'd1073741824;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] src;
wire   [3:0] w1_address0;
reg    w1_ce0;
wire   [31:0] w1_q0;
reg   [3:0] ia_0_reg_371;
reg   [3:0] j_0_reg_382;
wire   [31:0] SrcBuffer_q0;
wire    ap_CS_fsm_state3;
wire   [31:0] SrcBuffer_q1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_416_p2;
reg   [31:0] reg_505;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state90;
wire   [31:0] grp_fu_421_p2;
reg   [31:0] reg_512;
wire   [31:0] L1Buffer_q1;
reg   [31:0] reg_518;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state77_pp1_stage0_iter0;
wire    ap_block_state78_pp1_stage0_iter1;
wire    ap_block_state79_pp1_stage0_iter2;
wire    ap_block_state80_pp1_stage0_iter3;
wire    ap_block_state81_pp1_stage0_iter4;
wire    ap_block_state82_pp1_stage0_iter5;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln46_reg_772;
reg   [0:0] icmp_ln46_reg_772_pp1_iter1_reg;
wire    ap_CS_fsm_state85;
reg   [31:0] src_read_reg_609;
wire   [3:0] i_pre_fu_530_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln32_fu_524_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_437_p2;
reg   [31:0] tmp_1_reg_672;
wire   [31:0] grp_fu_443_p2;
reg   [31:0] tmp_1_1_reg_677;
reg   [31:0] tmp_1_2_reg_692;
reg   [31:0] tmp_1_3_reg_697;
reg   [31:0] tmp_1_4_reg_702;
wire    ap_CS_fsm_state8;
reg   [31:0] tmp_1_5_reg_707;
reg   [31:0] tmp_1_6_reg_712;
wire    ap_CS_fsm_state9;
reg   [31:0] tmp_1_7_reg_717;
reg   [31:0] tmp_1_8_reg_722;
wire    ap_CS_fsm_state10;
reg   [31:0] tmp_1_9_reg_727;
wire   [0:0] icmp_ln42_fu_542_p2;
reg   [0:0] icmp_ln42_reg_732;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state17_pp0_stage0_iter0;
wire    ap_block_state18_pp0_stage0_iter1;
wire    ap_block_state19_pp0_stage0_iter2;
wire    ap_block_state20_pp0_stage0_iter3;
wire    ap_block_state21_pp0_stage0_iter4;
wire    ap_block_state22_pp0_stage0_iter5;
wire    ap_block_state23_pp0_stage0_iter6;
wire    ap_block_state24_pp0_stage0_iter7;
wire    ap_block_state25_pp0_stage0_iter8;
wire    ap_block_state26_pp0_stage0_iter9;
wire    ap_block_state27_pp0_stage0_iter10;
wire    ap_block_state28_pp0_stage0_iter11;
wire    ap_block_state29_pp0_stage0_iter12;
wire    ap_block_state30_pp0_stage0_iter13;
wire    ap_block_state31_pp0_stage0_iter14;
wire    ap_block_state32_pp0_stage0_iter15;
wire    ap_block_state33_pp0_stage0_iter16;
wire    ap_block_state34_pp0_stage0_iter17;
wire    ap_block_state35_pp0_stage0_iter18;
wire    ap_block_state36_pp0_stage0_iter19;
wire    ap_block_state37_pp0_stage0_iter20;
wire    ap_block_state38_pp0_stage0_iter21;
wire    ap_block_state39_pp0_stage0_iter22;
wire    ap_block_state40_pp0_stage0_iter23;
wire    ap_block_state41_pp0_stage0_iter24;
wire    ap_block_state42_pp0_stage0_iter25;
wire    ap_block_state43_pp0_stage0_iter26;
wire    ap_block_state44_pp0_stage0_iter27;
wire    ap_block_state45_pp0_stage0_iter28;
wire    ap_block_state46_pp0_stage0_iter29;
wire    ap_block_state47_pp0_stage0_iter30;
wire    ap_block_state48_pp0_stage0_iter31;
wire    ap_block_state49_pp0_stage0_iter32;
wire    ap_block_state50_pp0_stage0_iter33;
wire    ap_block_state51_pp0_stage0_iter34;
wire    ap_block_state52_pp0_stage0_iter35;
wire    ap_block_state53_pp0_stage0_iter36;
wire    ap_block_state54_pp0_stage0_iter37;
wire    ap_block_state55_pp0_stage0_iter38;
wire    ap_block_state56_pp0_stage0_iter39;
wire    ap_block_state57_pp0_stage0_iter40;
wire    ap_block_state58_pp0_stage0_iter41;
wire    ap_block_state59_pp0_stage0_iter42;
wire    ap_block_state60_pp0_stage0_iter43;
wire    ap_block_state61_pp0_stage0_iter44;
wire    ap_block_state62_pp0_stage0_iter45;
wire    ap_block_state63_pp0_stage0_iter46;
wire    ap_block_state64_pp0_stage0_iter47;
wire    ap_block_state65_pp0_stage0_iter48;
wire    ap_block_state66_pp0_stage0_iter49;
wire    ap_block_state67_pp0_stage0_iter50;
wire    ap_block_state68_pp0_stage0_iter51;
wire    ap_block_state69_pp0_stage0_iter52;
wire    ap_block_state70_pp0_stage0_iter53;
wire    ap_block_state71_pp0_stage0_iter54;
wire    ap_block_state72_pp0_stage0_iter55;
wire    ap_block_state73_pp0_stage0_iter56;
wire    ap_block_state74_pp0_stage0_iter57;
wire    ap_block_state75_pp0_stage0_iter58;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln42_reg_732_pp0_iter1_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter2_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter3_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter4_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter5_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter6_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter7_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter8_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter9_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter10_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter11_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter12_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter13_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter14_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter15_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter16_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter17_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter18_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter19_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter20_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter21_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter22_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter23_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter24_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter25_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter26_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter27_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter28_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter29_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter30_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter31_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter32_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter33_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter34_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter35_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter36_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter37_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter38_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter39_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter40_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter41_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter42_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter43_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter44_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter45_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter46_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter47_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter48_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter49_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter50_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter51_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter52_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter53_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter54_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter55_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter56_reg;
reg   [0:0] icmp_ln42_reg_732_pp0_iter57_reg;
wire   [3:0] ia_fu_548_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [3:0] L1Buffer_addr_2_reg_741;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter1_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter2_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter3_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter4_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter5_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter6_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter7_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter8_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter9_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter10_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter11_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter12_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter13_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter14_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter15_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter16_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter17_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter18_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter19_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter20_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter21_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter22_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter23_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter24_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter25_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter26_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter27_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter28_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter29_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter30_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter31_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter32_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter33_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter34_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter35_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter36_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter37_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter38_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter39_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter40_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter41_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter42_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter43_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter44_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter45_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter46_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter47_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter48_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter49_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter50_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter51_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter52_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter53_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter54_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter55_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter56_reg;
reg   [3:0] L1Buffer_addr_2_reg_741_pp0_iter57_reg;
wire   [63:0] grp_fu_465_p1;
reg   [63:0] tmp_7_i_reg_752;
wire   [63:0] grp_fu_478_p2;
reg   [63:0] tmp_8_i_reg_757;
wire   [63:0] grp_fu_468_p2;
reg   [63:0] tmp_9_i_reg_762;
wire   [63:0] grp_fu_473_p2;
reg   [63:0] tmp_i_reg_767;
wire   [0:0] icmp_ln46_fu_574_p2;
wire    ap_CS_fsm_pp1_stage0;
reg   [0:0] icmp_ln46_reg_772_pp1_iter2_reg;
reg   [0:0] icmp_ln46_reg_772_pp1_iter3_reg;
reg   [0:0] icmp_ln46_reg_772_pp1_iter4_reg;
wire   [3:0] j_fu_580_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [3:0] L1Buffer_addr_3_reg_781;
reg   [3:0] L1Buffer_addr_3_reg_781_pp1_iter1_reg;
reg   [3:0] L1Buffer_addr_3_reg_781_pp1_iter2_reg;
reg   [3:0] L1Buffer_addr_3_reg_781_pp1_iter3_reg;
reg   [3:0] L1Buffer_addr_3_reg_781_pp1_iter4_reg;
reg   [31:0] w1_load_reg_792;
wire   [3:0] k_fu_598_p2;
reg   [3:0] k_reg_800;
wire    ap_CS_fsm_state84;
wire   [0:0] icmp_ln51_fu_592_p2;
wire    ap_CS_fsm_state16;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state17;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
wire    ap_CS_fsm_state76;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state77;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg   [3:0] L1Buffer_address0;
reg    L1Buffer_ce0;
reg    L1Buffer_we0;
reg   [31:0] L1Buffer_d0;
reg   [3:0] L1Buffer_address1;
reg    L1Buffer_ce1;
reg    L1Buffer_we1;
reg   [31:0] L1Buffer_d1;
reg   [3:0] SrcBuffer_address0;
reg    SrcBuffer_ce0;
reg    SrcBuffer_we0;
reg   [3:0] SrcBuffer_address1;
reg    SrcBuffer_ce1;
reg   [3:0] i_pre_0_reg_360;
wire   [31:0] ap_phi_mux_acc_0_phi_fu_397_p4;
reg   [31:0] acc_0_reg_393;
wire    ap_CS_fsm_state83;
reg   [3:0] k_0_reg_405;
wire   [63:0] zext_ln34_fu_536_p1;
wire   [63:0] zext_ln44_fu_554_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln48_fu_586_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln53_fu_604_p1;
wire   [31:0] grp_fu_461_p1;
reg   [31:0] grp_fu_416_p0;
reg   [31:0] grp_fu_416_p1;
wire    ap_CS_fsm_state86;
reg   [31:0] grp_fu_421_p0;
reg   [31:0] grp_fu_421_p1;
reg   [31:0] grp_fu_437_p0;
reg   [31:0] grp_fu_437_p1;
reg   [31:0] grp_fu_443_p0;
reg   [31:0] grp_fu_443_p1;
wire   [31:0] grp_fu_465_p0;
wire   [31:0] bitcast_ln15_fu_559_p1;
wire   [31:0] xor_ln15_fu_563_p2;
wire    ap_CS_fsm_state94;
reg   [30:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'd1;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
end

nnForwardProp_w1 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
w1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_address0),
    .ce0(w1_ce0),
    .q0(w1_q0)
);

nnForwardProp_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
nnForwardProp_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(grp_fu_416_p2),
    .src(src)
);

nnForwardProp_L1Buffer #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
L1Buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(L1Buffer_address0),
    .ce0(L1Buffer_ce0),
    .we0(L1Buffer_we0),
    .d0(L1Buffer_d0),
    .address1(L1Buffer_address1),
    .ce1(L1Buffer_ce1),
    .we1(L1Buffer_we1),
    .d1(L1Buffer_d1),
    .q1(L1Buffer_q1)
);

nnForwardProp_SrcBuffer #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SrcBuffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SrcBuffer_address0),
    .ce0(SrcBuffer_ce0),
    .we0(SrcBuffer_we0),
    .d0(src_read_reg_609),
    .q0(SrcBuffer_q0),
    .address1(SrcBuffer_address1),
    .ce1(SrcBuffer_ce1),
    .q1(SrcBuffer_q1)
);

nnForwardProp_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
nnForwardProp_fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_416_p0),
    .din1(grp_fu_416_p1),
    .ce(1'b1),
    .dout(grp_fu_416_p2)
);

nnForwardProp_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
nnForwardProp_fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_421_p0),
    .din1(grp_fu_421_p1),
    .ce(1'b1),
    .dout(grp_fu_421_p2)
);

nnForwardProp_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
nnForwardProp_fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_437_p0),
    .din1(grp_fu_437_p1),
    .ce(1'b1),
    .dout(grp_fu_437_p2)
);

nnForwardProp_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
nnForwardProp_fmul_32ns_32ns_32_4_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_443_p0),
    .din1(grp_fu_443_p1),
    .ce(1'b1),
    .dout(grp_fu_443_p2)
);

nnForwardProp_fptrunc_64ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
nnForwardProp_fptrunc_64ns_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_i_reg_767),
    .ce(1'b1),
    .dout(grp_fu_461_p1)
);

nnForwardProp_fpext_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
nnForwardProp_fpext_32ns_64_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_465_p0),
    .ce(1'b1),
    .dout(grp_fu_465_p1)
);

nnForwardProp_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
nnForwardProp_dadd_64ns_64ns_64_5_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_8_i_reg_757),
    .din1(64'd4607182418800017408),
    .ce(1'b1),
    .dout(grp_fu_468_p2)
);

nnForwardProp_ddiv_64ns_64ns_64_31_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
nnForwardProp_ddiv_64ns_64ns_64_31_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd4607182418800017408),
    .din1(tmp_9_i_reg_762),
    .ce(1'b1),
    .dout(grp_fu_473_p2)
);

nnForwardProp_dexp_64ns_64ns_64_18_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
nnForwardProp_dexp_64ns_64ns_64_18_full_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(tmp_7_i_reg_752),
    .ce(1'b1),
    .dout(grp_fu_478_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state17) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state17)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state17);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp0_iter58 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state77) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state76)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state77)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state77);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end else if ((1'b1 == ap_CS_fsm_state76)) begin
            ap_enable_reg_pp1_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        acc_0_reg_393 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        acc_0_reg_393 <= grp_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln32_fu_524_p2 == 1'd0))) begin
        i_pre_0_reg_360 <= i_pre_fu_530_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_pre_0_reg_360 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ia_0_reg_371 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_fu_542_p2 == 1'd0))) begin
        ia_0_reg_371 <= ia_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        j_0_reg_382 <= 4'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln46_fu_574_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_0_reg_382 <= j_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        k_0_reg_405 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        k_0_reg_405 <= k_reg_800;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_fu_542_p2 == 1'd0))) begin
        L1Buffer_addr_2_reg_741 <= zext_ln44_fu_554_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        L1Buffer_addr_2_reg_741_pp0_iter10_reg <= L1Buffer_addr_2_reg_741_pp0_iter9_reg;
        L1Buffer_addr_2_reg_741_pp0_iter11_reg <= L1Buffer_addr_2_reg_741_pp0_iter10_reg;
        L1Buffer_addr_2_reg_741_pp0_iter12_reg <= L1Buffer_addr_2_reg_741_pp0_iter11_reg;
        L1Buffer_addr_2_reg_741_pp0_iter13_reg <= L1Buffer_addr_2_reg_741_pp0_iter12_reg;
        L1Buffer_addr_2_reg_741_pp0_iter14_reg <= L1Buffer_addr_2_reg_741_pp0_iter13_reg;
        L1Buffer_addr_2_reg_741_pp0_iter15_reg <= L1Buffer_addr_2_reg_741_pp0_iter14_reg;
        L1Buffer_addr_2_reg_741_pp0_iter16_reg <= L1Buffer_addr_2_reg_741_pp0_iter15_reg;
        L1Buffer_addr_2_reg_741_pp0_iter17_reg <= L1Buffer_addr_2_reg_741_pp0_iter16_reg;
        L1Buffer_addr_2_reg_741_pp0_iter18_reg <= L1Buffer_addr_2_reg_741_pp0_iter17_reg;
        L1Buffer_addr_2_reg_741_pp0_iter19_reg <= L1Buffer_addr_2_reg_741_pp0_iter18_reg;
        L1Buffer_addr_2_reg_741_pp0_iter20_reg <= L1Buffer_addr_2_reg_741_pp0_iter19_reg;
        L1Buffer_addr_2_reg_741_pp0_iter21_reg <= L1Buffer_addr_2_reg_741_pp0_iter20_reg;
        L1Buffer_addr_2_reg_741_pp0_iter22_reg <= L1Buffer_addr_2_reg_741_pp0_iter21_reg;
        L1Buffer_addr_2_reg_741_pp0_iter23_reg <= L1Buffer_addr_2_reg_741_pp0_iter22_reg;
        L1Buffer_addr_2_reg_741_pp0_iter24_reg <= L1Buffer_addr_2_reg_741_pp0_iter23_reg;
        L1Buffer_addr_2_reg_741_pp0_iter25_reg <= L1Buffer_addr_2_reg_741_pp0_iter24_reg;
        L1Buffer_addr_2_reg_741_pp0_iter26_reg <= L1Buffer_addr_2_reg_741_pp0_iter25_reg;
        L1Buffer_addr_2_reg_741_pp0_iter27_reg <= L1Buffer_addr_2_reg_741_pp0_iter26_reg;
        L1Buffer_addr_2_reg_741_pp0_iter28_reg <= L1Buffer_addr_2_reg_741_pp0_iter27_reg;
        L1Buffer_addr_2_reg_741_pp0_iter29_reg <= L1Buffer_addr_2_reg_741_pp0_iter28_reg;
        L1Buffer_addr_2_reg_741_pp0_iter2_reg <= L1Buffer_addr_2_reg_741_pp0_iter1_reg;
        L1Buffer_addr_2_reg_741_pp0_iter30_reg <= L1Buffer_addr_2_reg_741_pp0_iter29_reg;
        L1Buffer_addr_2_reg_741_pp0_iter31_reg <= L1Buffer_addr_2_reg_741_pp0_iter30_reg;
        L1Buffer_addr_2_reg_741_pp0_iter32_reg <= L1Buffer_addr_2_reg_741_pp0_iter31_reg;
        L1Buffer_addr_2_reg_741_pp0_iter33_reg <= L1Buffer_addr_2_reg_741_pp0_iter32_reg;
        L1Buffer_addr_2_reg_741_pp0_iter34_reg <= L1Buffer_addr_2_reg_741_pp0_iter33_reg;
        L1Buffer_addr_2_reg_741_pp0_iter35_reg <= L1Buffer_addr_2_reg_741_pp0_iter34_reg;
        L1Buffer_addr_2_reg_741_pp0_iter36_reg <= L1Buffer_addr_2_reg_741_pp0_iter35_reg;
        L1Buffer_addr_2_reg_741_pp0_iter37_reg <= L1Buffer_addr_2_reg_741_pp0_iter36_reg;
        L1Buffer_addr_2_reg_741_pp0_iter38_reg <= L1Buffer_addr_2_reg_741_pp0_iter37_reg;
        L1Buffer_addr_2_reg_741_pp0_iter39_reg <= L1Buffer_addr_2_reg_741_pp0_iter38_reg;
        L1Buffer_addr_2_reg_741_pp0_iter3_reg <= L1Buffer_addr_2_reg_741_pp0_iter2_reg;
        L1Buffer_addr_2_reg_741_pp0_iter40_reg <= L1Buffer_addr_2_reg_741_pp0_iter39_reg;
        L1Buffer_addr_2_reg_741_pp0_iter41_reg <= L1Buffer_addr_2_reg_741_pp0_iter40_reg;
        L1Buffer_addr_2_reg_741_pp0_iter42_reg <= L1Buffer_addr_2_reg_741_pp0_iter41_reg;
        L1Buffer_addr_2_reg_741_pp0_iter43_reg <= L1Buffer_addr_2_reg_741_pp0_iter42_reg;
        L1Buffer_addr_2_reg_741_pp0_iter44_reg <= L1Buffer_addr_2_reg_741_pp0_iter43_reg;
        L1Buffer_addr_2_reg_741_pp0_iter45_reg <= L1Buffer_addr_2_reg_741_pp0_iter44_reg;
        L1Buffer_addr_2_reg_741_pp0_iter46_reg <= L1Buffer_addr_2_reg_741_pp0_iter45_reg;
        L1Buffer_addr_2_reg_741_pp0_iter47_reg <= L1Buffer_addr_2_reg_741_pp0_iter46_reg;
        L1Buffer_addr_2_reg_741_pp0_iter48_reg <= L1Buffer_addr_2_reg_741_pp0_iter47_reg;
        L1Buffer_addr_2_reg_741_pp0_iter49_reg <= L1Buffer_addr_2_reg_741_pp0_iter48_reg;
        L1Buffer_addr_2_reg_741_pp0_iter4_reg <= L1Buffer_addr_2_reg_741_pp0_iter3_reg;
        L1Buffer_addr_2_reg_741_pp0_iter50_reg <= L1Buffer_addr_2_reg_741_pp0_iter49_reg;
        L1Buffer_addr_2_reg_741_pp0_iter51_reg <= L1Buffer_addr_2_reg_741_pp0_iter50_reg;
        L1Buffer_addr_2_reg_741_pp0_iter52_reg <= L1Buffer_addr_2_reg_741_pp0_iter51_reg;
        L1Buffer_addr_2_reg_741_pp0_iter53_reg <= L1Buffer_addr_2_reg_741_pp0_iter52_reg;
        L1Buffer_addr_2_reg_741_pp0_iter54_reg <= L1Buffer_addr_2_reg_741_pp0_iter53_reg;
        L1Buffer_addr_2_reg_741_pp0_iter55_reg <= L1Buffer_addr_2_reg_741_pp0_iter54_reg;
        L1Buffer_addr_2_reg_741_pp0_iter56_reg <= L1Buffer_addr_2_reg_741_pp0_iter55_reg;
        L1Buffer_addr_2_reg_741_pp0_iter57_reg <= L1Buffer_addr_2_reg_741_pp0_iter56_reg;
        L1Buffer_addr_2_reg_741_pp0_iter5_reg <= L1Buffer_addr_2_reg_741_pp0_iter4_reg;
        L1Buffer_addr_2_reg_741_pp0_iter6_reg <= L1Buffer_addr_2_reg_741_pp0_iter5_reg;
        L1Buffer_addr_2_reg_741_pp0_iter7_reg <= L1Buffer_addr_2_reg_741_pp0_iter6_reg;
        L1Buffer_addr_2_reg_741_pp0_iter8_reg <= L1Buffer_addr_2_reg_741_pp0_iter7_reg;
        L1Buffer_addr_2_reg_741_pp0_iter9_reg <= L1Buffer_addr_2_reg_741_pp0_iter8_reg;
        icmp_ln42_reg_732_pp0_iter10_reg <= icmp_ln42_reg_732_pp0_iter9_reg;
        icmp_ln42_reg_732_pp0_iter11_reg <= icmp_ln42_reg_732_pp0_iter10_reg;
        icmp_ln42_reg_732_pp0_iter12_reg <= icmp_ln42_reg_732_pp0_iter11_reg;
        icmp_ln42_reg_732_pp0_iter13_reg <= icmp_ln42_reg_732_pp0_iter12_reg;
        icmp_ln42_reg_732_pp0_iter14_reg <= icmp_ln42_reg_732_pp0_iter13_reg;
        icmp_ln42_reg_732_pp0_iter15_reg <= icmp_ln42_reg_732_pp0_iter14_reg;
        icmp_ln42_reg_732_pp0_iter16_reg <= icmp_ln42_reg_732_pp0_iter15_reg;
        icmp_ln42_reg_732_pp0_iter17_reg <= icmp_ln42_reg_732_pp0_iter16_reg;
        icmp_ln42_reg_732_pp0_iter18_reg <= icmp_ln42_reg_732_pp0_iter17_reg;
        icmp_ln42_reg_732_pp0_iter19_reg <= icmp_ln42_reg_732_pp0_iter18_reg;
        icmp_ln42_reg_732_pp0_iter20_reg <= icmp_ln42_reg_732_pp0_iter19_reg;
        icmp_ln42_reg_732_pp0_iter21_reg <= icmp_ln42_reg_732_pp0_iter20_reg;
        icmp_ln42_reg_732_pp0_iter22_reg <= icmp_ln42_reg_732_pp0_iter21_reg;
        icmp_ln42_reg_732_pp0_iter23_reg <= icmp_ln42_reg_732_pp0_iter22_reg;
        icmp_ln42_reg_732_pp0_iter24_reg <= icmp_ln42_reg_732_pp0_iter23_reg;
        icmp_ln42_reg_732_pp0_iter25_reg <= icmp_ln42_reg_732_pp0_iter24_reg;
        icmp_ln42_reg_732_pp0_iter26_reg <= icmp_ln42_reg_732_pp0_iter25_reg;
        icmp_ln42_reg_732_pp0_iter27_reg <= icmp_ln42_reg_732_pp0_iter26_reg;
        icmp_ln42_reg_732_pp0_iter28_reg <= icmp_ln42_reg_732_pp0_iter27_reg;
        icmp_ln42_reg_732_pp0_iter29_reg <= icmp_ln42_reg_732_pp0_iter28_reg;
        icmp_ln42_reg_732_pp0_iter2_reg <= icmp_ln42_reg_732_pp0_iter1_reg;
        icmp_ln42_reg_732_pp0_iter30_reg <= icmp_ln42_reg_732_pp0_iter29_reg;
        icmp_ln42_reg_732_pp0_iter31_reg <= icmp_ln42_reg_732_pp0_iter30_reg;
        icmp_ln42_reg_732_pp0_iter32_reg <= icmp_ln42_reg_732_pp0_iter31_reg;
        icmp_ln42_reg_732_pp0_iter33_reg <= icmp_ln42_reg_732_pp0_iter32_reg;
        icmp_ln42_reg_732_pp0_iter34_reg <= icmp_ln42_reg_732_pp0_iter33_reg;
        icmp_ln42_reg_732_pp0_iter35_reg <= icmp_ln42_reg_732_pp0_iter34_reg;
        icmp_ln42_reg_732_pp0_iter36_reg <= icmp_ln42_reg_732_pp0_iter35_reg;
        icmp_ln42_reg_732_pp0_iter37_reg <= icmp_ln42_reg_732_pp0_iter36_reg;
        icmp_ln42_reg_732_pp0_iter38_reg <= icmp_ln42_reg_732_pp0_iter37_reg;
        icmp_ln42_reg_732_pp0_iter39_reg <= icmp_ln42_reg_732_pp0_iter38_reg;
        icmp_ln42_reg_732_pp0_iter3_reg <= icmp_ln42_reg_732_pp0_iter2_reg;
        icmp_ln42_reg_732_pp0_iter40_reg <= icmp_ln42_reg_732_pp0_iter39_reg;
        icmp_ln42_reg_732_pp0_iter41_reg <= icmp_ln42_reg_732_pp0_iter40_reg;
        icmp_ln42_reg_732_pp0_iter42_reg <= icmp_ln42_reg_732_pp0_iter41_reg;
        icmp_ln42_reg_732_pp0_iter43_reg <= icmp_ln42_reg_732_pp0_iter42_reg;
        icmp_ln42_reg_732_pp0_iter44_reg <= icmp_ln42_reg_732_pp0_iter43_reg;
        icmp_ln42_reg_732_pp0_iter45_reg <= icmp_ln42_reg_732_pp0_iter44_reg;
        icmp_ln42_reg_732_pp0_iter46_reg <= icmp_ln42_reg_732_pp0_iter45_reg;
        icmp_ln42_reg_732_pp0_iter47_reg <= icmp_ln42_reg_732_pp0_iter46_reg;
        icmp_ln42_reg_732_pp0_iter48_reg <= icmp_ln42_reg_732_pp0_iter47_reg;
        icmp_ln42_reg_732_pp0_iter49_reg <= icmp_ln42_reg_732_pp0_iter48_reg;
        icmp_ln42_reg_732_pp0_iter4_reg <= icmp_ln42_reg_732_pp0_iter3_reg;
        icmp_ln42_reg_732_pp0_iter50_reg <= icmp_ln42_reg_732_pp0_iter49_reg;
        icmp_ln42_reg_732_pp0_iter51_reg <= icmp_ln42_reg_732_pp0_iter50_reg;
        icmp_ln42_reg_732_pp0_iter52_reg <= icmp_ln42_reg_732_pp0_iter51_reg;
        icmp_ln42_reg_732_pp0_iter53_reg <= icmp_ln42_reg_732_pp0_iter52_reg;
        icmp_ln42_reg_732_pp0_iter54_reg <= icmp_ln42_reg_732_pp0_iter53_reg;
        icmp_ln42_reg_732_pp0_iter55_reg <= icmp_ln42_reg_732_pp0_iter54_reg;
        icmp_ln42_reg_732_pp0_iter56_reg <= icmp_ln42_reg_732_pp0_iter55_reg;
        icmp_ln42_reg_732_pp0_iter57_reg <= icmp_ln42_reg_732_pp0_iter56_reg;
        icmp_ln42_reg_732_pp0_iter5_reg <= icmp_ln42_reg_732_pp0_iter4_reg;
        icmp_ln42_reg_732_pp0_iter6_reg <= icmp_ln42_reg_732_pp0_iter5_reg;
        icmp_ln42_reg_732_pp0_iter7_reg <= icmp_ln42_reg_732_pp0_iter6_reg;
        icmp_ln42_reg_732_pp0_iter8_reg <= icmp_ln42_reg_732_pp0_iter7_reg;
        icmp_ln42_reg_732_pp0_iter9_reg <= icmp_ln42_reg_732_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        L1Buffer_addr_2_reg_741_pp0_iter1_reg <= L1Buffer_addr_2_reg_741;
        icmp_ln42_reg_732 <= icmp_ln42_fu_542_p2;
        icmp_ln42_reg_732_pp0_iter1_reg <= icmp_ln42_reg_732;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln46_fu_574_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        L1Buffer_addr_3_reg_781 <= zext_ln48_fu_586_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        L1Buffer_addr_3_reg_781_pp1_iter1_reg <= L1Buffer_addr_3_reg_781;
        icmp_ln46_reg_772 <= icmp_ln46_fu_574_p2;
        icmp_ln46_reg_772_pp1_iter1_reg <= icmp_ln46_reg_772;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        L1Buffer_addr_3_reg_781_pp1_iter2_reg <= L1Buffer_addr_3_reg_781_pp1_iter1_reg;
        L1Buffer_addr_3_reg_781_pp1_iter3_reg <= L1Buffer_addr_3_reg_781_pp1_iter2_reg;
        L1Buffer_addr_3_reg_781_pp1_iter4_reg <= L1Buffer_addr_3_reg_781_pp1_iter3_reg;
        icmp_ln46_reg_772_pp1_iter2_reg <= icmp_ln46_reg_772_pp1_iter1_reg;
        icmp_ln46_reg_772_pp1_iter3_reg <= icmp_ln46_reg_772_pp1_iter2_reg;
        icmp_ln46_reg_772_pp1_iter4_reg <= icmp_ln46_reg_772_pp1_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        k_reg_800 <= k_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_505 <= grp_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_512 <= grp_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state85) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln46_reg_772_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        reg_518 <= L1Buffer_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        src_read_reg_609 <= src;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_1_1_reg_677 <= grp_fu_443_p2;
        tmp_1_reg_672 <= grp_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_1_2_reg_692 <= grp_fu_437_p2;
        tmp_1_3_reg_697 <= grp_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_1_4_reg_702 <= grp_fu_437_p2;
        tmp_1_5_reg_707 <= grp_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_1_6_reg_712 <= grp_fu_437_p2;
        tmp_1_7_reg_717 <= grp_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_1_8_reg_722 <= grp_fu_437_p2;
        tmp_1_9_reg_727 <= grp_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_reg_732_pp0_iter1_reg == 1'd0))) begin
        tmp_7_i_reg_752 <= grp_fu_465_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_reg_732_pp0_iter19_reg == 1'd0))) begin
        tmp_8_i_reg_757 <= grp_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_reg_732_pp0_iter24_reg == 1'd0))) begin
        tmp_9_i_reg_762 <= grp_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_reg_732_pp0_iter55_reg == 1'd0))) begin
        tmp_i_reg_767 <= grp_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln46_reg_772 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w1_load_reg_792 <= w1_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        L1Buffer_address0 = L1Buffer_addr_3_reg_781_pp1_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter58 == 1'b1))) begin
        L1Buffer_address0 = L1Buffer_addr_2_reg_741_pp0_iter57_reg;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        L1Buffer_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        L1Buffer_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        L1Buffer_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        L1Buffer_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        L1Buffer_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        L1Buffer_address0 = zext_ln34_fu_536_p1;
    end else begin
        L1Buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        L1Buffer_address1 = zext_ln53_fu_604_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        L1Buffer_address1 = L1Buffer_addr_3_reg_781;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        L1Buffer_address1 = zext_ln44_fu_554_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        L1Buffer_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        L1Buffer_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        L1Buffer_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        L1Buffer_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        L1Buffer_address1 = 64'd1;
    end else begin
        L1Buffer_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter58 == 1'b1)) | ((ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        L1Buffer_ce0 = 1'b1;
    end else begin
        L1Buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        L1Buffer_ce1 = 1'b1;
    end else begin
        L1Buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        L1Buffer_d0 = grp_fu_437_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter58 == 1'b1))) begin
        L1Buffer_d0 = grp_fu_461_p1;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        L1Buffer_d0 = reg_512;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        L1Buffer_d0 = reg_505;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        L1Buffer_d0 = 32'd0;
    end else begin
        L1Buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        L1Buffer_d1 = reg_505;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        L1Buffer_d1 = reg_512;
    end else begin
        L1Buffer_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter58 == 1'b1) & (icmp_ln42_reg_732_pp0_iter57_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln32_fu_524_p2 == 1'd0)) | ((ap_enable_reg_pp1_iter5 == 1'b1) & (icmp_ln46_reg_772_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        L1Buffer_we0 = 1'b1;
    end else begin
        L1Buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        L1Buffer_we1 = 1'b1;
    end else begin
        L1Buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        SrcBuffer_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        SrcBuffer_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SrcBuffer_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SrcBuffer_address0 = 64'd3;
    end else if (((icmp_ln32_fu_524_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        SrcBuffer_address0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln32_fu_524_p2 == 1'd0))) begin
        SrcBuffer_address0 = zext_ln34_fu_536_p1;
    end else begin
        SrcBuffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        SrcBuffer_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        SrcBuffer_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SrcBuffer_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SrcBuffer_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SrcBuffer_address1 = 64'd1;
    end else begin
        SrcBuffer_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln32_fu_524_p2 == 1'd0)) | ((icmp_ln32_fu_524_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        SrcBuffer_ce0 = 1'b1;
    end else begin
        SrcBuffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        SrcBuffer_ce1 = 1'b1;
    end else begin
        SrcBuffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln32_fu_524_p2 == 1'd0))) begin
        SrcBuffer_we0 = 1'b1;
    end else begin
        SrcBuffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_542_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state17 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state17 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln46_fu_574_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state77 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state77 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_fu_416_p0 = acc_0_reg_393;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_416_p0 = ap_phi_mux_acc_0_phi_fu_397_p4;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_416_p0 = tmp_1_8_reg_722;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_416_p0 = tmp_1_6_reg_712;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_416_p0 = tmp_1_4_reg_702;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_416_p0 = tmp_1_2_reg_692;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_416_p0 = tmp_1_reg_672;
    end else begin
        grp_fu_416_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_fu_416_p1 = reg_518;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_416_p1 = 32'd3163822869;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_416_p1 = 32'd1048660038;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_416_p1 = 32'd1056480022;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_416_p1 = 32'd3219886682;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_416_p1 = 32'd1095432260;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_416_p1 = 32'd1073577327;
    end else begin
        grp_fu_416_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_421_p0 = tmp_1_9_reg_727;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_421_p0 = tmp_1_7_reg_717;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_421_p0 = tmp_1_5_reg_707;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_421_p0 = tmp_1_3_reg_697;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_421_p0 = tmp_1_1_reg_677;
    end else begin
        grp_fu_421_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_421_p1 = 32'd1086147273;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_421_p1 = 32'd1074224705;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_421_p1 = 32'd3190314431;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_421_p1 = 32'd1079799544;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_421_p1 = 32'd1087608936;
    end else begin
        grp_fu_421_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        grp_fu_437_p0 = L1Buffer_q1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_437_p0 = SrcBuffer_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_437_p0 = SrcBuffer_q0;
    end else begin
        grp_fu_437_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        grp_fu_437_p1 = w1_load_reg_792;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_437_p1 = 32'd1043927076;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_437_p1 = 32'd1060484420;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_437_p1 = 32'd3223369881;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_437_p1 = 32'd3240685221;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_437_p1 = 32'd1026414296;
    end else begin
        grp_fu_437_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_443_p0 = SrcBuffer_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_443_p0 = SrcBuffer_q1;
    end else begin
        grp_fu_443_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_443_p1 = 32'd3223177220;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_443_p1 = 32'd1065945475;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_443_p1 = 32'd3178407952;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_443_p1 = 32'd3231206512;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_443_p1 = 32'd3235122814;
    end else begin
        grp_fu_443_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w1_ce0 = 1'b1;
    end else begin
        w1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln32_fu_524_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln42_fu_542_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter57 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter58 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter57 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter58 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln42_fu_542_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln46_fu_574_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter4 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln46_fu_574_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            if (((icmp_ln51_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd30];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_acc_0_phi_fu_397_p4 = acc_0_reg_393;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln15_fu_559_p1 = L1Buffer_q1;

assign grp_fu_465_p0 = xor_ln15_fu_563_p2;

assign i_pre_fu_530_p2 = (i_pre_0_reg_360 + 4'd1);

assign ia_fu_548_p2 = (ia_0_reg_371 + 4'd1);

assign icmp_ln32_fu_524_p2 = ((i_pre_0_reg_360 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_542_p2 = ((ia_0_reg_371 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_574_p2 = ((j_0_reg_382 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_592_p2 = ((k_0_reg_405 == 4'd10) ? 1'b1 : 1'b0);

assign j_fu_580_p2 = (j_0_reg_382 + 4'd1);

assign k_fu_598_p2 = (k_0_reg_405 + 4'd1);

assign w1_address0 = zext_ln48_fu_586_p1;

assign xor_ln15_fu_563_p2 = (bitcast_ln15_fu_559_p1 ^ 32'd2147483648);

assign zext_ln34_fu_536_p1 = i_pre_0_reg_360;

assign zext_ln44_fu_554_p1 = ia_0_reg_371;

assign zext_ln48_fu_586_p1 = j_0_reg_382;

assign zext_ln53_fu_604_p1 = k_0_reg_405;

endmodule //nnForwardProp
